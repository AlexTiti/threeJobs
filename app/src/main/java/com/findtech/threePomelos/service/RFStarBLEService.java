package com.findtech.threePomelos.service;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.UUID;import android.app.Service;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothGatt;import android.bluetooth.BluetoothGattCallback;import android.bluetooth.BluetoothGattCharacteristic;import android.bluetooth.BluetoothGattDescriptor;import android.bluetooth.BluetoothGattService;import android.bluetooth.BluetoothProfile;import android.content.Intent;import android.os.Binder;import android.os.IBinder;import android.os.SystemClock;import android.util.Log;import com.findtech.threePomelos.base.BaseActivity;import com.findtech.threePomelos.base.MyApplication;import com.findtech.threePomelos.music.utils.L;import com.findtech.threePomelos.utils.IContent;import com.findtech.threePomelos.utils.ToastUtil;import com.findtech.threePomelos.utils.Tools;/* * 管理蓝牙的服务  * 			功能：  *			    1) 连接蓝牙设备 *				2) 管理连接状态 *				3) 获取蓝牙设备的相关服务 * * @author Kevin.wu *  */public final class RFStarBLEService extends Service {	public final static String TAG = "bleservice";	public final static String ACTION_GATT_CONNECTED = "com.rfstar.kevin.service.ACTION_GATT_CONNECTED";	public final static String ACTION_GATT_CONNECTING = "com.rfstar.kevin.service.ACTION_GATT_CONNECTING";	public final static String ACTION_GATT_DISCONNECTED = "com.rfstar.kevin.service.ACTION_GATT_DISCONNECTED";	public final static String ACTION_GATT_SERVICES_DISCOVERED = "com.rfstar.kevin.service.ACTION_GATT_SERVICES_DISCOVERED";	public final static String ACTION_DATA_AVAILABLE = "com.rfstar.kevin.service.ACTION_DATA_AVAILABLE";	public final static String ACTION_DATA_AVAILABLE_READ = "com.rfstar.kevin.service.ACTION_DATA_AVAILABLE_READ";	public final static String ACTION_WRITE_DONE = "com.rfstar.kevin.service.ACTION_WRITE_DONE";	public final static String DESCRIPTOR_WRITER_DONE = "com.rfstar.kevin.service.DescriptorWrite";	public final static String NOTIFY_WRITE_DONE = "com.rfstar.kevin.service.NOTITY_WRITE_DONE";	public final static String EXTRA_DATA = "com.rfstar.kevin.service.EXTRA_DATA";	public final static String ACTION_GAT_RSSI = "com.rfstar.kevin.service.RSSI";	public final static String RFSTAR_CHARACTERISTIC_ID = "com.rfstar.kevin.service.characteristic"; // 唯一标识//	private final IBinder kBinder = new LocalBinder();	private static ArrayList<BluetoothGatt> arrayGatts = new ArrayList<BluetoothGatt>(); // 存放BluetoothGatt的集合	@Override	public IBinder onBind(Intent intent) {		// TODO Auto-generated method stub		return kBinder;	}	@Override	public boolean onUnbind(Intent intent) {		// TODO Auto-generated method stub		return super.onUnbind(intent);	}	/**	 * 初始化BLE 如果已经连接就不用再次连接	 * 	 * @param	 * @return	 */	public boolean initBluetoothDevice(BluetoothDevice device) {		BluetoothGatt gatt = this.getBluetoothGatt(device);		if (gatt != null) {			if (gatt.connect()) {			} else {				return false;			}			return true;		}		gatt = device.connectGatt(this, false, bleGattCallback);		arrayGatts.add(gatt);		return true;	}	/**	 * 断开连接	 */	public void disconnect(BluetoothDevice device) {		BluetoothGatt gatt = this.getBluetoothGatt(device);		if (gatt == null) {			return;		}		gatt.disconnect();		gatt.close();		arrayGatts.remove(gatt);	}	/**	 * 连接防丢器	 * 	 * @return	 */	public boolean connect(BluetoothAdapter bleAdapter,BluetoothDevice device) {		BluetoothGatt gatt = getBluetoothGatt(device);		boolean b = gatt.connect();		if (b) {			arrayGatts.remove(gatt);		}		return b; // 写到这，无法打 cancelOpen	}	public class LocalBinder extends Binder {		public RFStarBLEService getService() {			return RFStarBLEService.this;		}	}	private final BluetoothGattCallback bleGattCallback = new BluetoothGattCallback() {		/*		 * 连接的状发生变化 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onConnectionStateChange(android		 * .bluetooth.BluetoothGatt, int, int)		 */		@Override		public void onConnectionStateChange(BluetoothGatt gatt, int status,				int newState) {			String action = null;			//连接成功			if (newState == BluetoothProfile.STATE_CONNECTED) {				action = ACTION_GATT_CONNECTED;				gatt.discoverServices();			} else if (newState == BluetoothProfile.STATE_DISCONNECTED) {				action = ACTION_GATT_DISCONNECTED;				gatt.close();				Intent intent_close = new Intent(BaseActivity.DEVICE_CLOSE_ONPAGE);				sendBroadcast(intent_close);		}			if (action != null && !action.equals("")) {				broadcastUpdate(action);			}		}		@Override		public void onServicesDiscovered(BluetoothGatt gatt, int status) {			if (status == BluetoothGatt.GATT_SUCCESS && !IContent.isSended ) {				IContent.isSended = true;				broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);			} else {			}		}		/*		 * 读取特征值 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onCharacteristicRead(android		 * .bluetooth.BluetoothGatt,		 * android.bluetooth.BluetoothGattCharacteristic, int)		 */		@Override		public void onCharacteristicRead(BluetoothGatt gatt,										 BluetoothGattCharacteristic characteristic,										 int status) {			if (status == BluetoothGatt.GATT_SUCCESS ) {				String  s = Tools.byte2Hex(characteristic.getValue());				L.e("AAAAA",s);				broadcastUpdate(ACTION_DATA_AVAILABLE_READ, characteristic);			}		}		/*		 * 特征值的变化 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onCharacteristicChanged(android		 * .bluetooth.BluetoothGatt,		 * android.bluetooth.BluetoothGattCharacteristic)		 */		@Override		public void onCharacteristicChanged(BluetoothGatt gatt,											BluetoothGattCharacteristic characteristic) {			L.e(TAG, "11111111111111111 onCharacteristicChanged  : " +Tools.byte2Hex(characteristic.getValue()) );			broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);		}		/*		 * 读取信号 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onReadRemoteRssi(android.		 * bluetooth.BluetoothGatt, int, int)		 */		@Override		public void onReadRemoteRssi(BluetoothGatt gatt, int rssi, int status) {			if (gatt.connect()) {				broadcastUpdate(ACTION_GAT_RSSI);				L.e(TAG, "11111111111111111 onReadRemoteRssi  : " + rssi);			}		}		@Override		public void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status) {			super.onDescriptorWrite(gatt, descriptor, status);			if (status == BluetoothGatt.GATT_SUCCESS){				L.e("=============","============"+DESCRIPTOR_WRITER_DONE);				broadcastUpdate(DESCRIPTOR_WRITER_DONE);			}			L.e(TAG, "11111111111111111 onDescriptorWrite  : "  +Arrays.toString(descriptor.getValue()));		}		@Override		public void onDescriptorRead(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status) {			super.onDescriptorRead(gatt, descriptor, status);			L.e(TAG, "11111111111111111 onDescriptorRead  : " + status);		}		@Override		public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {			super.onCharacteristicWrite(gatt, characteristic, status);			L.e(TAG, "11111111111111111 onCharacteristicWrite  : "+ Tools.byte2Hex(characteristic.getValue())+"="+status);			broadcastUpdate(ACTION_WRITE_DONE, characteristic);		}		@Override		public void onReliableWriteCompleted(BluetoothGatt gatt, int status) {			super.onReliableWriteCompleted(gatt, status);			L.e(TAG, "11111111111111111 onReliableWriteCompleted  : " + status);		}	};	/**	 * 发送数据到广播	 * 	 * @param action	 */	private void broadcastUpdate(String action) {		L.e("==============","=============="+action);		Intent intent = new Intent(action);		sendBroadcast(intent);	}	/**	 * 发送带蓝牙信息的到广播	 * 	 * @param action	 * @param characteristic	 */	private void broadcastUpdate(String action,			BluetoothGattCharacteristic characteristic) {		Intent intent = new Intent(action);		// For all other profiles, writes the data formatted in HEX.		final byte[] data = characteristic.getValue();		if (data != null && data.length > 0) {			intent.putExtra(EXTRA_DATA, characteristic.getValue());			intent.putExtra(RFSTAR_CHARACTERISTIC_ID, characteristic.getUuid()					.toString());		}		L.e("AAAA","broadcastUpdate");		sendBroadcast(intent);	}	public void readValue(BluetoothDevice device,			BluetoothGattCharacteristic characteristic) {		// TODO Auto-generated method stub		BluetoothGatt gatt = this.getBluetoothGatt(device);		if (gatt == null) {			L.e("", "kBluetoothGatt 为没有初始化，所以不能读取数据");			return;		}		boolean c =  gatt.setCharacteristicNotification(characteristic, true);		boolean b = gatt.readCharacteristic(characteristic);		L.e("AAAAA",b+"="+c);	}	public void writeValue(BluetoothDevice device,			BluetoothGattCharacteristic characteristic) {		L.e(TAG,characteristic.getUuid()+"=="+characteristic.getWriteType()+"="+characteristic.getProperties()+"="+characteristic.getPermissions());		// TODO Auto-generated method stub		BluetoothGatt gatt = this.getBluetoothGatt(device);		if (gatt == null) {			return;		}	boolean c = gatt.setCharacteristicNotification(characteristic, true);	boolean b = gatt.writeCharacteristic(characteristic);	L.e("currentTime", "55 writeValue :  连接上  数量：yyyy " + arrayGatts.size()+b+c);	}	public void setCharacteristicNotification(BluetoothDevice device,			BluetoothGattCharacteristic characteristic, boolean enable) {		L.e("AAAAAA","setCharacteristicNotification");		// TODO Auto-generated method stub		BluetoothGatt gatt = this.getBluetoothGatt(device);		if (gatt == null) {			Log.w(TAG, "kBluetoothGatt 为没有初始化，所以不能发送使能数据");			return;		}		boolean b =  gatt.setCharacteristicNotification(characteristic, enable);		BluetoothGattDescriptor localBluetoothGattDescriptor;		UUID localUUID = UUID				.fromString("00002902-0000-1000-8000-00805f9b34fb");		localBluetoothGattDescriptor = characteristic.getDescriptor(localUUID);		if (enable) {			byte[] arrayOfByte = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE;			if (localBluetoothGattDescriptor != null) {				localBluetoothGattDescriptor.setValue(arrayOfByte);			}		} else {			byte[] arrayOfByte = BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE;			if (localBluetoothGattDescriptor != null) {				localBluetoothGattDescriptor.setValue(arrayOfByte);			}		}		boolean f = gatt.writeDescriptor(localBluetoothGattDescriptor);		L.e("CCCCCC", "55 setCharacteristicNotification :  连接上  数量：yyyy " + arrayGatts.size()+b+f);	}	/**	 * 获取services	 * 	 * @return	 */	public List<BluetoothGattService> getSupportedGattServices(			BluetoothDevice device) {		BluetoothGatt gatt = this.getBluetoothGatt(device);		if (gatt == null) {			Log.w(TAG, "111111111111  services is null ");			return null;		}		return gatt.getServices();	}	// 从arrayGatts匹配出与device中address想同的BluetoothGatt	private BluetoothGatt getBluetoothGatt(BluetoothDevice device) {		BluetoothGatt gatt = null;		for (BluetoothGatt tmpGatt : arrayGatts) {			if (tmpGatt.getDevice().getAddress().equals(device.getAddress())) {				gatt = tmpGatt;			}		}		return gatt;	}}