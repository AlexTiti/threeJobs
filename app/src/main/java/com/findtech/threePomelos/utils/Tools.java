package com.findtech.threePomelos.utils;import android.app.Activity;import android.app.Dialog;import android.content.Context;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.Bitmap.Config;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.PorterDuff.Mode;import android.graphics.PorterDuffXfermode;import android.graphics.Rect;import android.graphics.RectF;import android.os.Build;import android.telephony.TelephonyManager;import android.text.TextUtils;import android.util.DisplayMetrics;import android.util.Log;import android.view.Window;import android.view.WindowManager;import com.findtech.threePomelos.entity.PersonDataEntity;import com.findtech.threePomelos.music.utils.L;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Arrays;import java.util.Calendar;import java.util.Comparator;import java.util.Date;import java.util.GregorianCalendar;import java.util.Locale;import java.util.TimeZone;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * 工具类 */public class Tools {    /**     * 收到蓝牙传输的-->体重     */    public static final int WEIGHT_MSG = 0x81;    public static final String WEIGHT_PRE = "DAT:WH";    /**     * 收到蓝牙传输的-->里程信息     */    public static final int MILEAGE_INFO_MSG = 0x82;    public static final String MILEAGE_INFO_PRE = "DAT:MI";    /**     * 收到蓝牙传输的-->时间请求     */    public static final int REQUEST_TIME_MSG = 0x83;    public static final String REQUEST_TIME_PRE = "DAT:TS";    /**     * 收到蓝牙传输的-->固件版本号     */    public static final int RECEIVE_FIRMWARE_VERSION_MSG = 0x84;    public static final String RECEIVE_FIRMWARE_VERSION_PRE = "DAT:FR";    /**     * 收到蓝牙传输的-->温度和电量     */    public static final int RECEIVE_TEMPERATURE_ELECTRIC_MSG = 0x85;    public static final String RECEIVE_TEMPERATURE_ELECTRIC_PRE = "DAT:ET";    /**     * 图片获取方式消息     */    public static final int PHOTO_PICKED_WITH_DATA = 0x91;    public static final int CAMERA_WITH_DATA = 0x92;    /**     * 小贴士类型     */    public static final String TIPS_TYPE = "tips_type";    /**     * 小贴士title     */    public static final String TIPS_TYPE_TITLE = "tips_type_title";    /**     * 字节转十六进制 为相应的字符串显示     *     * @param data     * @return     */    public static String byte2Hex(byte data[]) {        if (data != null && data.length > 0) {            StringBuilder sb = new StringBuilder(data.length);            for (byte tmp : data) {                sb.append(String.format("%02X ", tmp));            }            return sb.toString();        }        return "no data";    }    /**     * 去除字符串中的空格、回车、换行符、制表符     */    public static String replaceTabs(String str) {        String dest = "";        if (str != null) {            Pattern p = Pattern.compile("\\s*|\t|\r|\n");            Matcher m = p.matcher(str);            dest = m.replaceAll("");        }        return dest;    }    /**     * 判断字符串中最后一位是否是换行符     */    public static boolean lastCharIsLineBreak(String str) {        boolean dest = false;        if (str != null) {            dest = str.charAt(str.length() - 1) == '\n';        }        return dest;    }    /**     * 判断字符串中是否只有数字或点     *     * @return true/false     */    public static boolean isNumericOrDot(String str) {        for (int i = str.length(); --i >= 0; ) {            if (!TextUtils.isEmpty(str) && str.contains(" ")) {                str = str.replace(" ", "");            }            if (!Character.isDigit(str.charAt(i)) && !('.' == (str.charAt(i))) && !(',' == (str.charAt(i)))) {                Log.d("ZZ", "str.charAt(" + i + ") = " + str.charAt(i));                return false;            }        }        return true;    }    /**     * 用于温度数据的判断     * 判断字符串中是否只有数字、点、负号     *     * @return true/false     */    public static boolean isNumericOrDotOrMinus(String str) {        for (int i = str.length(); --i >= 0; ) {            if (!TextUtils.isEmpty(str) && str.contains(" ")) {                str = str.replace(" ", "");            }            if (!Character.isDigit(str.charAt(i)) && !('.' == (str.charAt(i))) && !(',' == (str.charAt(i))) && !('-' == (str.charAt(i)))) {                Log.d("ZZ", "isNumericOrDotOrMinus str.charAt(" + i + ") = " + str.charAt(i));                return false;            }        }        return true;    }    /**     * 获取年份     *     * @param datapickStr ,eg 2015-11-2     * @return 2015     */    public static String getYearFromDataPicker(String datapickStr) {        String arr[] = datapickStr.split("-");        return arr[0];    }    /**     * 获取月份     *     * @param datapickStr ,eg 2015-11-2     * @return 11     */    public static String getMonthFromDataPicker(String datapickStr) {        String arr[] = datapickStr.split("-");        String month = arr[1];        if (month.length() == 1) {            month = "0" + month;        }        return month;    }    /**     * 获取日期     *     * @param datapickStr ,eg 2015-11-2     * @return 2     */    public static String getDayFromDataPicker(String datapickStr) {        String arr[] = datapickStr.split("-");        String day = arr[2];        if (day.length() == 1) {            day = "0" + day;        }        return day;    }    public static int primaryDataType(String data) {        Log.d("ZZ", "primaryDataType --> data = " + data);        if (data.contains(WEIGHT_PRE)) {            return WEIGHT_MSG;        }        if (data.contains(MILEAGE_INFO_PRE)) {            return MILEAGE_INFO_MSG;        }        if (data.contains(REQUEST_TIME_PRE)) {            return REQUEST_TIME_MSG;        }        if (data.contains(RECEIVE_FIRMWARE_VERSION_PRE)) {            return RECEIVE_FIRMWARE_VERSION_MSG;        }        if (data.contains(RECEIVE_TEMPERATURE_ELECTRIC_PRE)) {            return RECEIVE_TEMPERATURE_ELECTRIC_MSG;        }        return -1;    }    public static String getSystemTimeInChina(String format) {        SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.CHINA);        sdf.setTimeZone(TimeZone.getTimeZone("GMT+8"));        return sdf.format(new java.util.Date());    }    public static String getCurrentTime() {        final Calendar mCalendar = Calendar.getInstance();        mCalendar.setTimeInMillis(System.currentTimeMillis());        return mCalendar.get(Calendar.YEAR) + "-"                + (mCalendar.get(Calendar.MONTH) + 1) + "-"                + mCalendar.get(Calendar.DAY_OF_MONTH);    }    public static Date getCurrentDate() {        final String currentDate = getSystemTimeInChina("yyyy-MM-dd");        return getDateFromTimeStr(currentDate);    }    public static Date getCurrentDateHour() {        Date date = new Date();        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        String time = simpleDateFormat.format(date.getTime());        try {            date = simpleDateFormat.parse(time);        } catch (ParseException e) {            e.printStackTrace();        }        return date;    }    public static String getTimeFromDate(Date date) {        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");        return simpleDateFormat.format(date);    }    public static Date getDateFromTimeStr(String time) {        Date date = null;        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");        try {            date = simpleDateFormat.parse(time);        } catch (ParseException e) {            e.printStackTrace();        }        return date;    }    public static int getTime() {        Calendar calendar = Calendar.getInstance();        return calendar.get(Calendar.HOUR_OF_DAY);    }    /**     * 提取第二个'.'，之前的String     *     * @param str     * @return     */    public static String extractStringFirstPoint(String str) {        if (TextUtils.isEmpty(str)) {            return "0.0";        }        int pointNum = stringContainPointNumbers(str);        if (pointNum > 1) {            str = str.substring(0, str.indexOf('.', str.indexOf('.') + 1));        }        return str;    }    /**     * 判断字符串中包含多少个 '.'     *     * @param str     * @return     */    public static int stringContainPointNumbers(String str) {        int counter = 0;        if (TextUtils.isEmpty(str)) {            return counter;        }        int strSize = str.length();        for (int i = 0; i < strSize; i++) {            if ('.' == str.charAt(i)) {                counter++;            }        }        return counter;    }    public static class SortArrayList implements Comparator {        public int compare(Object arg0, Object arg1) {            PersonDataEntity day0 = (PersonDataEntity) arg0;            PersonDataEntity day1 = (PersonDataEntity) arg1;            return day0.getTime().compareTo(day1.getTime());        }    }    public static void setDialogBackground(Dialog dialog, float dimAmount, float alpha) {        Window dialogWindow = dialog.getWindow();        WindowManager.LayoutParams p = dialogWindow.getAttributes(); // 获取对话框当前的参数值        p.alpha = alpha; // 设置本身透明度        p.dimAmount = dimAmount; // 设置黑暗度        dialogWindow.setAttributes(p);    }    public static boolean isLollipop() {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;    }    public static byte[] getDateTimeSplit() {        byte bytes[] = new byte[7];        Calendar calendar = Calendar.getInstance();        bytes[0] = (byte) (calendar.get(Calendar.YEAR) / 100);        bytes[1] = (byte) (calendar.get(Calendar.YEAR) % 100);        bytes[2] = (byte) (calendar.get(Calendar.MONTH) + 1);        bytes[3] = (byte) calendar.get(Calendar.DAY_OF_MONTH);        bytes[4] = (byte) calendar.get(Calendar.HOUR_OF_DAY);        bytes[5] = (byte) calendar.get(Calendar.MINUTE);        bytes[6] = (byte) calendar.get(Calendar.SECOND);        return bytes;    }    public static String getCurrentVersion(Context context){        PackageManager manager = context.getPackageManager();        try {            PackageInfo info = manager.getPackageInfo(context.getPackageName(),0);            return  info.versionName;        } catch (PackageManager.NameNotFoundException e) {            e.printStackTrace();        }        return "1.1.0";    }}